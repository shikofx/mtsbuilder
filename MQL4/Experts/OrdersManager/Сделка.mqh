//+------------------------------------------------------------------+
//|                                                       Сделка.mqh |
//|                                                Пархейчук Дмитрий |
//|                                                                  |
//+------------------------------------------------------------------+
/*Для увеличения скорости поиска сделки среди в истории и в торговле
создается свое хранилище сделок. При обращении в это хранилище сделка
будет находиться однозначно по */
/*Цена открытия - цена на которой открывается сделка. Актуальна для 
отложенных ордеров*/

/*Уровень убытка - это цена на которой сделка будет закрыта сделка, 
если маскировка включена, или цена на которую устанавливается StopLoss,
если маскировка выключена. При включенной мескировке можно реализовать
многоступенчатый уровень убытка. Это значит, что у сделки будет несколько
уровней убытка, которые будут срабатывать в определенных условиях.*/

/*Уровень прибыли - это цена на которой сделка будет закрыта сделка, 
если маскировка включена, или цена на которую устанавливается TakeProfit,
если маскировка выключена. При включенной мескировке можно реализовать
многоступенчатый уровень прибыли. Это значит, что у сделки будет несколько
уровней прибыли, которые будут срабатывать в определенных условиях.*/

/*Время жизни - количество минут, которое живет сделка. По истечении 
этого времени сделка принудительно закрывается.*/

/*Время закрытия - момент времени, в который закроется сделка. Т.е. 
при достижении времени 8.00 15.04.2015 сделка будет закрыта принудительно*/

#property copyright "Пархейчук Дмитрий"
#property link      ""
#property version   "1.00"
#property strict
#include "../Библиотеки/Перечисления.mqh"

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
class Сделка
  {
private:
   int               тип; //OP_BUY/OP_SELL
   ENUM_НАПРАВЛЕНИЕ_СДЕЛКИ направление; //покупка или продажа
   ENUM_ТИП_СДЕЛКИ   тип_сделки; //отложенный в прибыли или в убытке
   bool              маскировка; //включатель маскировки
   int               тикет; //тикет
   ENUM_СИМВОЛЫ      символ; //валютная пара или металлы
   datetime          время_открытия;
   double            объем_сделки; // объем должен определяться управлением капитала
   double            вес_сделки; //определяется для порций сделок
   double            цена_открытия,цена_закрытия;
   int               магический_номер;
   double            уровень_прибыли;
   double            уровень_убытка;
   int               время_жизни; //в минутах
   datetime          время_закрытия;
   int               отклонение;//slippage
   color             цвет;
   ENUM_СТАТУС_СДЕЛКИ статус_сделки;
   double            прибыль; //take profit
   double            убыток; //stop loss

public:

                     Сделка();
                     Сделка(int _тикет);
                     Сделка(int _тип,ENUM_СИМВОЛЫ _символ,double _объем,int _прибыль,int _убыток,int _время_жизни,int _магический_номер,color _цвет);
                    ~Сделка();
   int               ТикетСделки(){return тикет;}
   void              ТикетСделки(int _тикет){тикет=_тикет;}
   void              ОбнулитьСделку();
   double            ЦенаОткрытия(); //Возвращает цену открытия ордера
   bool              ЦенаОткрытия(double _уровень); //Задает цену открытия сделки
   double            ОбъемСделки(){return объем_сделки;}
   int               КоличествоСделок();
   double            УровеньПрибыли(); //Возвращает текущий уровень прибыли
   void              УровеньПрибыли(double _уровень); //Задает уровень прибыли
   void              УровеньПрибыли(int _расстояние);
   void              ВесСделки(double _вес){вес_сделки=_вес;}//устанавливает вес сделки в порции
   double            УровеньУбытка(); //Возвращает текущий уровень убытка
   bool              УровеньУбытка(double _уровень); //Задает уровень убытка объекту  
   int               ВремяЖизни(); //Возвращает время жизни сделки (в минутах)
   bool              ВремяЖизни(int _время); //Задает время жизни сделки (в минутах)
   void              ПроверитьВремяЖизни();
   datetime          ВремяЗакрытия();
   bool              ВремяЗакрытия(datetime _время);

   bool              ОткрытьСделку();
   bool              ОткрытьСделку(double _цена);

   bool              ЗакрытьСделку();
   void              ПроверитьСтатусСделки();
   ENUM_СТАТУС_СДЕЛКИ СтатусСделки();
   void              СтатусСделки(ENUM_СТАТУС_СДЕЛКИ _статус);
   void              КопироватьСделку(Сделка *_priemnik);
   bool              ИзменитьЦену(double _цена); //только для отложенных ордеров
   void              УстановитьПорцию(ENUM_ЧИСЛО_СТУПЕНЕЙ _размер,double _п1,double _п2,double _п3,double _п4,double _п5,double _п6); //для парциального управления капиталом

  };
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Сделка::Сделка()
  {
   вес_сделки=1;
   статус_сделки=пусто;
   цена_открытия=0;
   объем_сделки=MarketInfo(EnumToString(символ),MODE_MINLOT);
   тикет=0;
   время_открытия=0;
   уровень_прибыли= 0;
   уровень_убытка = 0;
   время_закрытия =0;

  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Сделка::Сделка(int _тип,ENUM_СИМВОЛЫ _символ,double _объем,int _прибыль,int _убыток,int _время_жизни,int _магический_номер,color _цвет)
  {
   вес_сделки=1;
   статус_сделки=пусто;
   магический_номер=_магический_номер;
   цена_открытия=0;
   double минимальный_объем=MarketInfo(EnumToString(_символ),MODE_MINLOT);
   if(_объем<минимальный_объем)
      объем_сделки=минимальный_объем;
   else объем_сделки=_объем;
   символ=_символ;
   время_жизни=_время_жизни;
   цвет=_цвет;
   тип = _тип;
   if(тип==OP_BUY || тип==OP_BUYLIMIT || тип==OP_BUYSTOP)
      направление=покупка;
   if(тип==OP_SELL || тип==OP_SELLLIMIT || тип==OP_SELLSTOP)
      направление=продажа;
   if(тип==OP_BUY || тип==OP_SELL)
      тип_сделки=мгновенная;
   if(тип==OP_BUYLIMIT || тип==OP_SELLLIMIT)
      тип_сделки=отложенная_в_убытке;
   if(тип==OP_BUYSTOP || тип==OP_SELLSTOP)
      тип_сделки=отложенная_в_прибыли;
   if(направление==покупка)
     {
      прибыль=_прибыль*Point();
      убыток=_убыток*Point();
     }
   if(направление==продажа)
     {
      прибыль=-_прибыль*Point();
      убыток=-_убыток*Point();
     }

  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Сделка::Сделка(int _тикет)
  {
   вес_сделки=1;
   bool choice=OrderSelect(_тикет,SELECT_BY_TICKET,MODE_TRADES);
   тикет=_тикет;

   магический_номер=OrderMagicNumber();
   цена_открытия=OrderOpenPrice();
   объем_сделки=OrderLots();
   тип=OrderType();
   if(тип==OP_BUY || тип==OP_BUYLIMIT || тип==OP_BUYSTOP)
      направление=покупка;
   if(тип==OP_SELL || тип==OP_SELLLIMIT || тип==OP_SELLSTOP)
      направление=продажа;
   if(тип==OP_BUY || тип==OP_SELL)
      тип_сделки=мгновенная;
   if(тип==OP_BUYLIMIT || тип==OP_SELLLIMIT)
      тип_сделки=отложенная_в_убытке;
   if(тип==OP_BUYSTOP || тип==OP_SELLSTOP)
      тип_сделки=отложенная_в_прибыли;
   уровень_прибыли= OrderTakeProfit();
   уровень_убытка = OrderStopLoss();
   this.ПроверитьСтатусСделки();
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Сделка::~Сделка()
  {
  }
//+------------------------------------------------------------------+
//|Возвращает цену открытия ордера                                   |
//+------------------------------------------------------------------+
double Сделка::ЦенаОткрытия()
  {
   return цена_открытия;
  }
//+------------------------------------------------------------------+
//|Задает цену открытия сделки                                       |
//+------------------------------------------------------------------+
bool Сделка::ЦенаОткрытия(double _цена_открытия)
  {
   цена_открытия=_цена_открытия;
   return true;
  }
//+------------------------------------------------------------------+
//|Возвращает текущий уровень прибыли                                |
//+------------------------------------------------------------------+
double Сделка::УровеньПрибыли()
  {
   return уровень_прибыли;
  }
//+------------------------------------------------------------------+
//|Задает уровень прибыли                                            |
//+------------------------------------------------------------------+
void Сделка::УровеньПрибыли(double _уровень)
  {
   уровень_прибыли=_уровень;
  }
//+------------------------------------------------------------------+
//|Задает уровень прибыли по расстоянию от текущей цены              |
//+------------------------------------------------------------------+
void Сделка::УровеньПрибыли(int _расстояние)
  {
   if(направление==покупка)
      уровень_прибыли=Ask+_расстояние*Point;
   if(направление==продажа)
      уровень_прибыли=Bid-_расстояние*Point;
  }
//+------------------------------------------------------------------+
//|Возвращает текущий уровень убытка                                 |
//+------------------------------------------------------------------+
double            Сделка::УровеньУбытка()
  {
   return уровень_убытка;
  }
//+------------------------------------------------------------------+
//|Задает уровень убытка объекту                                     |
//+------------------------------------------------------------------+
bool              Сделка::УровеньУбытка(double _уровень)
  {
   уровень_убытка=_уровень;
   return true;
  }
//+------------------------------------------------------------------+
//|Возвращает время жизни сделки (в минутах)                         |
//+------------------------------------------------------------------+
int               Сделка::ВремяЖизни()
  {
   return время_жизни;
  }
//+------------------------------------------------------------------+
//|Задает время жизни сделки (в минутах)                             |
//+------------------------------------------------------------------+
bool              Сделка::ВремяЖизни(int _время)
  {
   время_жизни=_время;
   return true;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Сделка::ПроверитьВремяЖизни()
  {
   if(статус_сделки==открыта && время_жизни!=0)
   {
      bool choice = OrderSelect(тикет, SELECT_BY_TICKET, MODE_TRADES);
      if(choice && (TimeCurrent()-OrderOpenTime())/60>=время_жизни)
         this.ЗакрытьСделку();
   }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
datetime          Сделка::ВремяЗакрытия()
  {
   return время_закрытия;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool              Сделка::ВремяЗакрытия(datetime _время)
  {
   время_закрытия=_время;
   return true;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool Сделка::ОткрытьСделку()
  {
   тикет=OrderSend(EnumToString(символ),тип,объем_сделки,цена_открытия,отклонение,уровень_убытка,уровень_прибыли,NULL,1,0,цвет);
   return тикет;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool Сделка::ОткрытьСделку(double _цена)
  {
   if(тип_сделки==отложенная_в_прибыли ||
      тип_сделки==отложенная_в_убытке)
      цена_открытия=_цена;

   if(тип_сделки==мгновенная)
     {
      if(направление==покупка)
         цена_открытия=Ask;
      if(направление==продажа)
         цена_открытия=Bid;
     }
   уровень_прибыли=цена_открытия+прибыль;
   уровень_убытка=цена_открытия-убыток;

   тикет=OrderSend(EnumToString(символ),тип,вес_сделки*объем_сделки,цена_открытия,отклонение,уровень_убытка,уровень_прибыли,NULL,магический_номер,0,цвет);
   return тикет;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool Сделка::ИзменитьЦену(double _цена) //только для отложенных ордеров
  {
   if(тип_сделки==отложенная_в_прибыли ||
      тип_сделки==отложенная_в_убытке)
      цена_открытия=_цена;

   уровень_прибыли=цена_открытия+прибыль;
   уровень_убытка=цена_открытия-убыток;

   bool результат=OrderModify(тикет,цена_открытия,уровень_убытка,уровень_прибыли,0,цвет);
   return результат;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool              Сделка::ЗакрытьСделку()
  {
   bool choice=false;
   if(тип_сделки==мгновенная)
     {
      if(направление==покупка)
         цена_закрытия=Bid;
      if(направление==продажа)
         цена_закрытия=Ask;

      choice=OrderClose(тикет,объем_сделки,цена_закрытия,отклонение,цвет);
     }
   if(статус_сделки==отложена)
     {
      choice=OrderDelete(тикет,цвет);
      this.ОбнулитьСделку();
     }
   return choice;
  }
//+------------------------------------------------------------------+

int Сделка::КоличествоСделок()
  {
   int количествоСделок=0;
   for(int index=OrdersTotal()-1;index>=0; index --)
      if(OrderSelect(index,SELECT_BY_POS,MODE_TRADES))
        {
         if(OrderType()==тип && магический_номер==OrderMagicNumber())
            количествоСделок++;

        }
   return(количествоСделок);
  }
//+------------------------------------------------------------------+

void Сделка::ПроверитьСтатусСделки()
  {
   if(тикет!=0)
     {
      bool choice=OrderSelect(тикет,SELECT_BY_TICKET,MODE_TRADES);
      if(choice)
        {
         if(OrderCloseTime()==0)
           {

            if(OrderType()==OP_BUY || OrderType()==OP_SELL)
               статус_сделки=открыта;

            if(OrderType()==OP_BUYSTOP || OrderType()==OP_SELLSTOP ||
               OrderType()==OP_BUYLIMIT || OrderType()==OP_SELLLIMIT)
               статус_сделки=отложена;
           }
         else
           {
            if(OrderType()==OP_BUY || OrderType()==OP_SELL)
               статус_сделки=закрыта;

            if(OrderType()==OP_BUYSTOP || OrderType()==OP_SELLSTOP ||
               OrderType()==OP_BUYLIMIT || OrderType()==OP_SELLLIMIT)
               статус_сделки=удалена;
           }
        }
     }
   else
      статус_сделки=пусто;
  }
//+------------------------------------------------------------------+
ENUM_СТАТУС_СДЕЛКИ Сделка::СтатусСделки()
  {
   ПроверитьСтатусСделки();
   return статус_сделки;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void Сделка::СтатусСделки(ENUM_СТАТУС_СДЕЛКИ _статус)
  {
   статус_сделки=_статус;
  }
//+------------------------------------------------------------------+

void Сделка::ОбнулитьСделку()
  {
   статус_сделки=пусто;
   цена_открытия=0;
   объем_сделки=объем_сделки;
   тикет=0;
   время_открытия=0;
   уровень_прибыли= 0;
   уровень_убытка = 0;
   время_закрытия =0;

  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
/*double Сделка::ВесСделки()
  {
   OrderSelect()
   return 0;
  }*/
//+------------------------------------------------------------------+
