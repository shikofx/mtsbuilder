//+------------------------------------------------------------------+
//|                                                        Свеча.mqh |
//|                                Инвестиционная группа Витязи Духа |
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "Инвестиционная группа Витязи Духа"
#property link      ""
#property version   "1.00"
#property strict
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
#include "../../Библиотеки/Перечисления.mqh"
//!!!!Разработать представление для образного представления свечей
// enum типСвечи{зажата, поджата, длинный_хвост, длинный_нос}
// это позволит представлять свечу как объект

enum ENUM_НАПРАВЛЕНИЕ_СВЕЧИ
{
   свеча_вверх, свеча_вниз, свеча_нулевая
};

class Свеча
  {
private:
   double                  теньА_; //максимальная попутная цена (High - свеча_вверх, Low - свеча_вниз) - темечко
   double                     теньА; //расстояние от цены закрытия до максимальной попутной цены (High - свеча_вверх, Low - свеча_вниз)
   double                  конец; //цена закрытия свечи
   double                     тело; //размер тела свечи = цена закрытия - цена открытия
   double                  начало; //цена откытия свечи
   double                     теньЮ; //расстояние от цены открытия до минимальной встречной цены (Low - свеча_вверх, High - свеча_вниз)
   double                  теньЮ_; //минимальная встречная цена (Low - свеча_вверх, High - свеча_вниз)
   long                    активность; //торговый объем
   datetime                время;
   
   int                     номер;
   ENUM_НАПРАВЛЕНИЕ_СВЕЧИ направление;
   int         таймфрейм;
   ENUM_СИМВОЛЫ                  инструмент; //валютная пара
   
public:
                              Свеча(ENUM_СИМВОЛЫ _инструмент, int _номер, int _таймфрейм);
                              ~Свеча();
   double                     Сигнал();
   void                       РасчитатьСвечу();
   ENUM_НАПРАВЛЕНИЕ_СВЕЧИ    Направление();
   double                        Тело();
   double                     Начало(); //определяет цену открытия свечи
   double                     Конец(); //определяет цену закрытия свечи
   double                        ТеньЮ();
   double                        ТеньА();
   double                     ТеньЮ_();
   double                     ТеньА_();
   long                       Активность();
   datetime                   Время();
   double                     Наполнение(); //измеряется в % и определяет сколько всего тело занимает в размере всей свечи
  };
  
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Свеча::Свеча(ENUM_СИМВОЛЫ _инструмент, int _номер, int _таймфрейм)
  {
  таймфрейм = _таймфрейм;
  номер = _номер;
  инструмент = _инструмент;
  теньА_ = 0;
  теньА = 0;
  конец = 0;
  тело = 0;
  начало = 0;
  теньЮ = 0;
  теньЮ_ = 0;
  активность = 0;
  время = 0;
  
  
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Свеча::~Свеча()
  {
  
  }
//+------------------------------------------------------------------+
void Свеча::РасчитатьСвечу()
   {
   конец = iClose(EnumToString(инструмент), таймфрейм, номер);
   начало = iOpen(EnumToString(инструмент), таймфрейм, номер);
   тело = (конец - начало)/Point;
   
   if(тело>0)
      направление = свеча_вверх;
   else if(тело<0)
      направление = свеча_вниз;
   else
      направление = свеча_нулевая;
   
   if(направление==свеча_вверх || направление == свеча_нулевая)
      {
      теньА_ = iHigh(EnumToString(инструмент), таймфрейм, номер);
      теньА = (теньА_ - конец)/Point;
      }
   else
      {
      теньА_ = iLow(EnumToString(инструмент), таймфрейм, номер);   
      теньА = (конец - теньА_)/Point;
      }
   
   if(направление==свеча_вверх || направление == свеча_нулевая)
      {
      теньЮ_ = iLow(EnumToString(инструмент), таймфрейм, номер);
      теньЮ = (начало - теньЮ_)/Point;
      }
   else
      {
      теньЮ_ = iHigh(EnumToString(инструмент), таймфрейм, номер);      
      теньЮ = (теньЮ_ - начало)/Point;
      }
   активность = iVolume(EnumToString(инструмент), таймфрейм, номер);
   время = iTime(EnumToString(инструмент), таймфрейм, номер);
   }


ENUM_НАПРАВЛЕНИЕ_СВЕЧИ Свеча::Направление()
  {
  return направление;
  }

double Свеча::Тело()
   {
   return тело;
   }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Свеча::Начало() //определяет цену открытия свечи
  {
   return начало;   
  }

double Свеча::Конец() //определяет цену закрытия свечи
  {
   return конец;   
  }

double Свеча::ТеньЮ()
  {
   return теньЮ;   
  }

double Свеча::ТеньА()
  {
   return теньА;   
  }
  
double Свеча::ТеньЮ_()
  {
   return теньЮ_;   
  }

double Свеча::ТеньА_()
  {
   return теньА_;   
  }

long Свеча::Активность()
   {
   return активность;  
   }

datetime Свеча::Время()
   {
   return время;
   }
   
double Свеча::Наполнение() //измеряется в % и определяет сколько всего тело занимает в размере всей свечи
  {
   return 100*(теньА+теньЮ)/тело;   
  }
//+------------------------------------------------------------------+
