//+------------------------------------------------------------------+
//|                                              ПлавающаяДельта.mqh |
//|                                Инвестиционная группа Витязи Духа |
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "Инвестиционная группа Витязи Духа"
#property link      ""
#property version   "1.00"
#property strict
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
class Объем
  {
private:
   double            объем;
   double            временный_объем;
   double            минимальный_объем;
   double            максимальный_объем;
   int               переключатель;
   double            начальный_депозит;
   double            временный_депозит;
   double            текущий_депозит;
   double            депозит_понижения;
   double            свободные_средства;
   double            ставка_снижения;
   double            дельта;
   double            номер_уровня;

public:
                     Объем();
                     Объем(int _переключатель,double _начальный_депозит,double _минимальный_объем,double _ставка_снижения,double _дельта);
   double            ОбъемТорговли();
                    ~Объем();
  };
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Объем::Объем(int _переключатель,double _начальный_депозит,double _минимальный_объем,double _ставка_снижения,double _дельта)
  {
   переключатель=_переключатель;
   начальный_депозит=_начальный_депозит;
   минимальный_объем= _минимальный_объем;
   ставка_снижения=_ставка_снижения;
   дельта=_дельта;
   максимальный_объем=MarketInfo(Symbol(),MODE_MAXLOT);
   объем=_минимальный_объем;
   временный_объем=0;
   временный_депозит = 0;
   текущий_депозит=0;
   депозит_понижения=0;
   свободные_средства=0;
   номер_уровня=0;

  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
Объем::~Объем()
  {
  }
//+------------------------------------------------------------------+
double Объем::ОбъемТорговли()
  {
   if(дельта!=0)
     {
      текущий_депозит=AccountBalance();
      //------------------------1. переключатель0 ОБЪЕМОВ-------------------------
      if(текущий_депозит>=2*переключатель*начальный_депозит)
        { //когда текущий объем больше начального в 20 раз
         for(int i=1; i<=10; i++)
            if(текущий_депозит>=MathPow(переключатель,i)*MathPow(2,i)*начальный_депозит)
              {
               начальный_депозит=MathPow(переключатель,i)*MathPow(2,i)*начальный_депозит; //меняем планку начального объема
               минимальный_объем=MathPow(переключатель,i)*минимальный_объем; //меняем минимальный шаг 
               дельта=MathPow(переключатель,i)*дельта;  //меняем дельту
              }
        }
      //-------------------------2. ПРЯМОЙ ХОД-------------------------------------
      if(текущий_депозит>=начальный_депозит)
        {
         объем=минимальный_объем *(MathFloor(0.5*(1+MathSqrt(1+8*(текущий_депозит-начальный_депозит)/дельта))));
        }
      else
        {
         объем=минимальный_объем;
        }

      //------------------------3. РАСЧЕТ ВЫСВОБОЖДЕННЫХ СРЕДСТВ
      if(объем>временный_объем)
        {
         номер_уровня=MathFloor(объем/минимальный_объем);
         свободные_средства=0.5*дельта*номер_уровня *(номер_уровня-1) *(1-ставка_снижения);
         депозит_понижения=начальный_депозит+свободные_средства;
         временный_объем=объем; //только при повышении объемов

        }

      //------------------------4. ОБРАТНЫЙ ХОД----------------------------------------
      if(временный_депозит>текущий_депозит && объем>=2*минимальный_объем)
        {
         объем=минимальный_объем *(MathFloor(0.5*(1+MathSqrt(1+8*(текущий_депозит-депозит_понижения)/(дельта*ставка_снижения)))));
         начальный_депозит=депозит_понижения;

        }
      временный_депозит=текущий_депозит;   //временно хранит последний уровень объемов

      if(объем<минимальный_объем)
         объем = минимальный_объем;
      if(объем>= максимальный_объем)
         объем = максимальный_объем;
     }
   else
      объем=минимальный_объем;
   return объем;
  }
//+------------------------------------------------------------------+
